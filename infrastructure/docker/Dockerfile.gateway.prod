# Production-ready Dockerfile for Redsys API Gateway (Nginx)
# Enterprise-grade nginx configuration with security hardening
# Uses official nginx image with pinned version for stability

FROM nginx:1.24-alpine

# Install required packages for enterprise deployment
RUN apk add --no-cache \
    curl \
    openssl \
    certbot \
    certbot-nginx \
    && rm -rf /var/cache/apk/*

# Create enterprise directory structure
RUN mkdir -p /etc/nginx/ssl \
    /var/log/nginx \
    /var/cache/nginx \
    /etc/nginx/conf.d \
    /var/www/html \
    /tmp/nginx

# Copy enterprise nginx configuration
COPY services/api-gateway/nginx.conf /etc/nginx/nginx.conf
COPY services/api-gateway/conf.d/ /etc/nginx/conf.d/

# Set proper permissions (enterprise security standard)
RUN chown -R nginx:nginx /var/cache/nginx \
    /var/log/nginx \
    /etc/nginx/conf.d \
    /var/www/html \
    /tmp/nginx \
    && chmod -R 755 /var/cache/nginx \
    /var/log/nginx \
    /var/www/html \
    /tmp/nginx \
    && chmod 644 /etc/nginx/nginx.conf \
    && chmod 644 /etc/nginx/conf.d/*.conf

# Create non-root user for nginx (nginx:alpine already runs as nginx)
# But ensure proper permissions
RUN chown -R nginx:nginx /etc/nginx/ssl

# Health check endpoint with security headers
RUN echo 'server { \
    listen 80; \
    location /health { \
    return 200 "healthy\n"; \
    add_header Content-Type text/plain; \
    add_header X-Content-Type-Options nosniff; \
    add_header X-Frame-Options DENY; \
    add_header X-XSS-Protection "1; mode=block"; \
    } \
    location /nginx_status { \
    stub_status on; \
    access_log off; \
    allow 127.0.0.1; \
    deny all; \
    } \
    }' > /etc/nginx/conf.d/health.conf

# Security: Remove unnecessary capabilities
RUN setcap -r /usr/sbin/nginx 2>/dev/null || true

# Expose ports
EXPOSE 80 443

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD curl -f http://localhost/health || exit 1

# Start nginx with proper signal handling
CMD ["nginx", "-g", "daemon off;"] 